// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  role          Role           @default(USER)
  questions     Question[]
  answers       Answer[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Vote          Vote[]
  Comment       Comment[]
}

enum Role {
  GUEST
  USER
  ADMIN
}

model Question {
  id          String   @id @default(uuid())
  title       String
  description Json
  tags        Tag[]
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  answers     Answer[]
  acceptedId  String? // optional accepted answer ID
  accepted    Answer?  @relation("AcceptedAnswer", fields: [acceptedId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Answer {
  id          String     @id @default(uuid())
  content     Json
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  question    Question   @relation(fields: [questionId], references: [id])
  questionId  String
  votes       Vote[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  acceptedFor Question[] @relation("AcceptedAnswer")
  Comment     Comment[]
}

model Vote {
  id        String   @id @default(uuid())
  value     Int // 1 for upvote, -1 for downvote
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([answerId, userId]) // one vote per user per answer
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
}

enum NotificationType {
  ANSWERED
  COMMENTED
  MENTIONED
}

model Comment {
  id        String   @id @default(uuid())
  content   Json
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String
  createdAt DateTime @default(now())
}
